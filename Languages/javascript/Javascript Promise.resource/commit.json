{"compress":true,"commitItems":[["056d9582-00d6-47c2-a369-bf2502c623c2",1565784812987,"## References\n[Javascript promise, under the hood.](https://medium.com/@ningxia/javascript-promises-under-the-hood-4ce853fcb2c9)\n\nThis article illustrate how promise works by writing its own promise library squab. It clearly shows what \"promise\" generally looks like.\n\n[Promise by 廖雪锋](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n\n## Summary\n注意区分：决议（resolve), 完成（fulfill) 拒绝（reject) 异常(error)\n\nA Promise represents a value which may be available now, or in the future, or never.\nBefore ES6, it's just a syntactical sugar for asynchronous function callback. (Not for ES6, in which promise has *built-in async support.*{.b} \n\nES6在事件队列（macroqueue)的基础上，增加了一个任务队列（microqueue)。 microqueue的优先级更高，js引擎每处理完一个macroqueue事件，它都会优先处理所有的microqueue中的事件，等microqueue中的事件处理完后再处理macroqueue中的下一个事件。 \n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\nconsole.log('-2')\nsetTimeout(()=>{\n    console.log('-1')\n},0)\np.then((v)=>{\n    promisify(v)\n})\n// 0 1 -2 2 3 -1\n```\n\nProblems with callback\n1. 非线性，难理解，易出错\n2. 信任问题，控制反转\n   * 过早调用 （Zalgo风险）\n   * 过晚调用（或不调用)\n   * 调用次数过多或过少\n   * 未能传递所需的环境或参数\n   * 吞掉可能出现的错误和异常\n\n> Promise并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其它工具之间的可信任的中介机制。\n\nSome notes for `promise`:\n1. 流程控制\n2. 注册事件\n3. 如何调度的:同一promise的then调用顺序？不同promise的then调用顺序？\n4. 由于promise决议后只能有一个值（或一个拒绝理由), resolve/reject 只接受一个参数，其它参数会被忽略(`{tc-b} 避免传递参数混乱`)。多次调用resolve 也会只执行第一个（*避免过多调用*{.b}）。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+1,v+2)\n        resolve(v+3,v+4)\n    })\n}\n\nlet p = promisify(0)\np.then((v,w)=>{\n    console.log(v,w)\n})\n//0 1\n```\n5. Promise 把整个操作（包括异常）变成了异步，避免了Zalgo风险. 从而使得`then`可以在‘操作’的后面提供 resolve/reject 参数. 注意，构造promise时，虽然 resolve/reject 是以参数形式存在，但是可以自由使用它们。以下面的promisify为例：\n```js\nfunction request(url){\n\treturn new Promise( function(resolve,reject){\n    \tajax(url,resolve);\n    });\n}\n```\najax函数是立即执行的，它可以把 （此时空的）resolve 当作回调。然而，当ajax函数异步完成后需要调用 resolve 时，Promise机制可以保证 resolve的调用顺利地进行。如何保证？首先ajax是异步调用resolve的，即使把ajax换成同步函数，promise也会使其异步化（*避免过早调用*{.b}），这样可以保证在request同一个tick中，通过then得到的resolve都是已经准备就绪的。注意，即使不在同一个tick中注册的resolve函数也会被顺利执行(*避免过晚或过少调用*{.b}）。\n```js\nfunction promisify(val){\n    return new Promise(function(resolve,reject){\n        console.log(val);\n        resolve();\n    })\n}\nconsole.log(1)\nlet  p = promisify(2)\nconsole.log(3)\n\nlet q = promisify(4)\nlet z = q.then(()=>{\n    console.log(7)\n    return p.then(()=>{\n        console.log(9)\n    })\n})\nconsole.log(5)\np.then(()=>{\n    console.log(8)\n})\nconsole.log(6)\n//1 2 3 4 5 6 7 8 9\n```\n\n6. Promise.resolve() 会展开thenable的值,从而得到可信任的promise。若传入的参数是真正的promise, Promise.resilve() 什么都不会做，只会直接返回这个参数。\n7. resolve和reject的返回值会作为then返回的新promise的决议值。resolve/reject都可以得到新的未决议的promise (可能fullfill,也可能reject). 注意区分当前promise和then得到的新promise, 当前reject，但then得到的新promise是既可以fullfill又可以reject的。\n然而，`new Promise`中的 resolve/reject则不同。 若提供的参数是promise, resolve会展开它，决议值是该参数promise的决议值（可能是完成的也可能是拒绝的）。而reject的决议值则只能是拒绝的。因此 `new Promise( function(resolve,reject){})` 中的 resolve 确实是“决议” （而非完成）的意思。而then方法中最好理解为 `then(fulfilled, rejected)`. 前者中resolve/reject 是形参，后者中 fulfilled/rejected 是实参。\n\n8. then未提供resolve或reject时，默认的resolve/reject会把当前决议值（或拒绝理由）传递下去。`catch(err){}` 则是`then(null, function(err){})` 的缩写。\n9. promise chain中的错误（异常或reject)可以通过在chain的末端加一个`catch()`来处理，如果中间的then没有rejected处理，那么默认的rejected函数会将该错误往下传。唯一的问题是最后的catch仍返回一个可能出错的promise，这个问题ES6本身没有提供解决方案。\n\n## `new Promise()`\n1. `new Promise(function(resolve,reject){})` 中形参resolve/reject对应的实参是 Promise.resolve/Promise.reject. 以下两种构造是等价的\n```js\nlet p =new Promise(function(resolve,reject){resolve(1);});\nlet q = Promise.resolve(1);\n```\n2. `new Promise()` 中的代码是立即执行的（当前tick)， 其中的resolve/reject语句是异步执行的，其它语句（之前和之后的）可以看作是同步的。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\n\np.then((v)=>{\n    console.log(v)\n})\n// 0 1 2\n```\n3. `new Promise(null)` 并不会返回一个rejected promise, 而是抛出异常。因为promise构造过程中出现异常会使得promise构造失败。\n\n## `then`方法\n1. 调用promise的`then()` 会自动创建一个新的promise从调用返回\n2. 在then的resolve/reject内部，如果返回一个值或抛出一个异常，新返回的promise就相应地决议为该值.\n3. 如果resolve/reject 返回一个promise, 它将会被*展开*{.r}，不管它的决议值是什么，都会成为then返回的新promise的决议值。(新返回的promise的决议值是那个promise展开后的值，不是那个promise本身）\n\n## 其它API\n`all`, `race`, `none`, `any`, `first`, `last`\n\n### Promise局限性\n1. promise chain返回的是最后一个promise, 没有保存中间promise的引用，无法在外面给中间的promise关联处理函数。若中间的promise有自己的错误处理，则最后的promise不会得到错误的通知 （除非中间的错误处理函数继续产生拒绝）。这与`try...catch...`类似。\n2. promise只能决议为单一值，需要多个值的话可以封闭成单个值，但是在复杂的场景中会比较笨重。一种方法是可以分解成多个promise后用promise.all来处理。\n3. promise只能决议一次，不能像监听事件一样，事件每发生一次相应的监听函数就会被调用一次。一种方法是每次事件触发后构造一个新的promise.\n4. 已有代码大都基于回调，需要手动promisify. 可以编写类似于`Promise.wrap()`的函数来解决，该wrap函数返回一个promisory. promisory调用才返回一个promise. 例如 `let request = Promise.wrap(ajax);` ES6并未提供类似的wrap函数。\n5. promise无法取消。一种方法是用“门” 来hack. 单独的promise不应该可取消，但是取消一个promise chain是合理的。\n\n## Promise/A+\n[The official specification](https://promisesaplus.com)\n\nA 'promise' is an object or function with a `then` method whose behavior conforms to this specification.\n\nA promise must be in one of three states: pending, fulfilled, or rejected.\n\nWhen pending, a promise:\n* may transition to either the fulfilled or rejected state.\n\nWhen fulfilled, a promise:\n* must not transition to any other state.\n* must have a value, which must not change.\nWhen rejected, a promise:\n* must not transition to any other state.\n* must have a reason, which must not change.\n\nHere, “must not change” means immutable identity (i.e. ===), but does not imply deep immutability.\n\nA promise must provide a then method to access its current or eventual value or reason.\n\nA promise’s then method accepts two arguments (both are optional, non-function are ignored):\n```\npromise.then(onFulfilled, onRejected)\n```\n`then` must return a promise\n```js\n'use strict';\nvar p1 = new Promise(function (resolve, reject) {\n    console.log('p1 creating...'); //execute immediately\n    reject('rejecting');  //transit to fulfilled\n    resolve('resolving'); //invalid\n    console.log('p1 created'); //execute immediately\n});\nconsole.log(typeof p1); //object\nconsole.log(p1);\np1.then(function (result) {\n    console.log(result)\n}, function (err) {\n    console.log(err)\n});\n```\noutput:\n```\np1 creating...\np1 created\nobject\nPromise { <rejected> 'rejecting' }\nrejecting\n```\n",[[1565784798477,["yonggu@yongs-MacBook-Air.local",[[-1,0,"#"],[1,1,"\n"]],[0,1],[1,1]]],[1565784805630,["yonggu@yongs-MacBook-Air.local",[[1,0,"# Javascript Promise"]],[0,0],[20,20]]],[1565784837282,["yonggu@yongs-MacBook-Air.local",[[-1,0,"# Javascript Promise"]],[0,20],[0,0]]],[1565784838473,["yonggu@yongs-MacBook-Air.local",[[-1,0,"\n"]],[1,1],[0,0]]],[1565785275239,["yonggu@yongs-MacBook-Air.local",[[-1,707,"{.b} "]],[712,712],[707,707]]],[1565785280620,["yonggu@yongs-MacBook-Air.local",[[1,683,"*"]],[683,683],[684,684]]],[1565785284569,["yonggu@yongs-MacBook-Air.local",[[1,708,"*"]],[707,707],[708,708]]],[1565785309765,["yonggu@yongs-MacBook-Air.local",[[-1,1512,"`{tc-b} "]],[1519,1519],[1512,1512]]],[1565785310709,["yonggu@yongs-MacBook-Air.local",[[1,1512,"*"]],[1512,1512],[1513,1513]]],[1565785313179,["yonggu@yongs-MacBook-Air.local",[[-1,1521,"`"]],[1522,1522],[1521,1521]]],[1565785314385,["yonggu@yongs-MacBook-Air.local",[[1,1521,"**"]],[1521,1521],[1523,1523]]],[1565785317291,["yonggu@yongs-MacBook-Air.local",[[1,1513,"*"]],[1513,1513],[1514,1514]]],[1565785318933,["yonggu@yongs-MacBook-Air.local",[[-1,1512,"**"]],[1514,1514],[1512,1512]]],[1565785319742,["yonggu@yongs-MacBook-Air.local",[[1,1512,"=="]],[1512,1512],[1514,1514]]],[1565785322508,["yonggu@yongs-MacBook-Air.local",[[-1,1522,"**"]],[1524,1524],[1522,1522]]],[1565785323401,["yonggu@yongs-MacBook-Air.local",[[1,1522,"=="]],[1522,1522],[1524,1524]]],[1565785330145,["yonggu@yongs-MacBook-Air.local",[[-1,707,"**"]],[709,709],[707,707]]],[1565785331221,["yonggu@yongs-MacBook-Air.local",[[1,707,"=="]],[707,707],[709,709]]],[1565785334900,["yonggu@yongs-MacBook-Air.local",[[-1,682,"**"]],[684,684],[682,682]]],[1565785335828,["yonggu@yongs-MacBook-Air.local",[[1,682,"=="]],[682,682],[684,684]]],[1565785343066,["yonggu@yongs-MacBook-Air.local",[[-1,1547,"*"]],[1548,1548],[1547,1547]]],[1565785343986,["yonggu@yongs-MacBook-Air.local",[[1,1547,"=="]],[1547,1547],[1549,1549]]],[1565785348778,["yonggu@yongs-MacBook-Air.local",[[-1,1555,"*{.b}"]],[1560,1560],[1555,1555]]],[1565785349766,["yonggu@yongs-MacBook-Air.local",[[1,1555,"=="]],[1555,1555],[1557,1557]]],[1565785352148,["yonggu@yongs-MacBook-Air.local",[[-1,1555,"=="]],[1557,1557],[1555,1555]]],[1565785352904,["yonggu@yongs-MacBook-Air.local",[[1,1555,"+"]],[1555,1555],[1556,1556]]],[1565785356025,["yonggu@yongs-MacBook-Air.local",[[-1,1547,"=="]],[1549,1549],[1547,1547]]],[1565785356509,["yonggu@yongs-MacBook-Air.local",[[1,1547,"++"]],[1547,1547],[1549,1549]]],[1565785359106,["yonggu@yongs-MacBook-Air.local",[[-1,1547,"++"]],[1549,1549],[1547,1547]]],[1565785360096,["yonggu@yongs-MacBook-Air.local",[[1,1547,"=="]],[1547,1547],[1549,1549]]],[1565785362810,["yonggu@yongs-MacBook-Air.local",[[-1,1555,"++"]],[1557,1557],[1555,1555]]],[1565785363820,["yonggu@yongs-MacBook-Air.local",[[1,1555,"=="]],[1555,1555],[1557,1557]]],[1565785378894,["yonggu@yongs-MacBook-Air.local",[[1,1565,"="]],[1565,1565],[1566,1566]]],[1565785380301,["yonggu@yongs-MacBook-Air.local",[[-1,1565,"="]],[1566,1566],[1565,1565]]],[1565785389484,["yonggu@yongs-MacBook-Air.local",[[-1,2319,"*{.b}"]],[2324,2324],[2319,2319]]],[1565785390109,["yonggu@yongs-MacBook-Air.local",[[1,2319,"=="]],[2319,2319],[2321,2321]]],[1565785392536,["yonggu@yongs-MacBook-Air.local",[[-1,2309,"*"]],[2310,2310],[2309,2309]]],[1565785393275,["yonggu@yongs-MacBook-Air.local",[[1,2309,"=="]],[2309,2309],[2311,2311]]],[1565785396981,["yonggu@yongs-MacBook-Air.local",[[-1,2211,"*"]],[2212,2212],[2211,2211]]],[1565785398029,["yonggu@yongs-MacBook-Air.local",[[1,2211,"=="]],[2211,2211],[2213,2213]]],[1565785401278,["yonggu@yongs-MacBook-Air.local",[[-1,2219,"*{.b}"]],[2224,2224],[2219,2219]]],[1565785402213,["yonggu@yongs-MacBook-Air.local",[[1,2219,"=="]],[2219,2219],[2221,2221]]],[1565785473096,[null,[[1,1557,"）"],[-1,2210,"*"],[1,2213,"避"],[-1,2218,"*"],[1,2221,"）"],[-1,2306,"*"],[1,2309,"避"],[-1,2317,"*"],[1,2320,"）"]],[1557,1557],[2321,2321]]],[1565785473096,[null,[[-1,1557,"）"],[1,2211,"*"],[-1,2213,"避"],[1,2219,"*"],[-1,2221,"）"],[1,2307,"*"],[-1,2309,"避"],[1,2318,"*"],[-1,2320,"）"]],[2321,2321],[1557,1557]]],[1565785417515,["yonggu@yongs-MacBook-Air.local",[[-1,4361,"*{.r}"]],[4366,4366],[4361,4361]]],[1565785418531,["yonggu@yongs-MacBook-Air.local",[[1,4361,"=="]],[4361,4361],[4363,4363]]],[1565785420231,["yonggu@yongs-MacBook-Air.local",[[-1,4358,"*"]],[4359,4359],[4358,4358]]],[1565785420625,["yonggu@yongs-MacBook-Air.local",[[1,4358,"=="]],[4358,4358],[4360,4360]]],[1565785593094,[null,[[1,1557,"）"],[-1,2210,"*"],[1,2213,"避"],[-1,2218,"*"],[1,2221,"）"],[-1,2306,"*"],[1,2309,"避"],[-1,2317,"*"],[1,2320,"）"],[-1,4357,"*"],[1,4360,"展"],[-1,4361,"*"],[1,4364,"，"]],[1557,1557],[4365,4365]]],[1565785593094,[null,[[-1,1557,"）"],[1,2211,"*"],[-1,2213,"避"],[1,2219,"*"],[-1,2221,"）"],[1,2307,"*"],[-1,2309,"避"],[1,2318,"*"],[-1,2320,"）"],[1,4358,"*"],[-1,4360,"展"],[1,4362,"*"],[-1,4364,"，"]],[4365,4365],[1557,1557]]],[1565785565511,["yonggu@yongs-MacBook-Air.local",[[1,709,")"]],[709,709],[710,710]]],[1565785570442,["yonggu@yongs-MacBook-Air.local",[[-1,706,"."]],[707,707],[706,706]]],[1565785571788,["yonggu@yongs-MacBook-Air.local",[[1,708,"."]],[708,708],[709,709]]],[1565786253133,[null,[[1,1558,"）"],[-1,2211,"*"],[1,2214,"避"],[-1,2219,"*"],[1,2222,"）"],[-1,2307,"*"],[1,2310,"避"],[-1,2318,"*"],[1,2321,"）"],[-1,4358,"*"],[1,4361,"展"],[-1,4362,"*"],[1,4365,"，"]],[1558,1558],[4366,4366]]],[1565786253133,[null,[[-1,1558,"）"],[1,2212,"*"],[-1,2214,"避"],[1,2220,"*"],[-1,2222,"）"],[1,2308,"*"],[-1,2310,"避"],[1,2319,"*"],[-1,2321,"）"],[1,4359,"*"],[-1,4361,"展"],[1,4363,"*"],[-1,4365,"，"]],[4366,4366],[1558,1558]]],[1565786193836,["yonggu@yongs-MacBook-Air.local",[[-1,2800,"i"]],[2801,2801],[2800,2800]]],[1565786194452,["yonggu@yongs-MacBook-Air.local",[[1,2800,"h"]],[2800,2800],[2801,2801]]],[1565786195081,["yonggu@yongs-MacBook-Air.local",[[-1,2800,"h"]],[2801,2801],[2800,2800]]],[1565786195775,["yonggu@yongs-MacBook-Air.local",[[1,2800,"o"]],[2800,2800],[2801,2801]]]],null,"yonggu@yongs-MacBook-Air.local"],["b9ca0a68-d946-41bd-8f5f-bf1883eabf6f",1565786753149,"# References\n[Javascript promise, under the hood.](https://medium.com/@ningxia/javascript-promises-under-the-hood-4ce853fcb2c9)\n\nThis article illustrate how promise works by writing its own promise library squab. It clearly shows what \"promise\" generally looks like.\n\n[Promise by 廖雪锋](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n\n## Summary\n注意区分：决议（resolve), 完成（fulfill) 拒绝（reject) 异常(error)\n\nA Promise represents a value which may be available now, or in the future, or never.\nBefore ES6, it's just a syntactical sugar for asynchronous function callback. (Not for ES6, in which promise has ==built-in async support==.)\n\nES6在事件队列（macroqueue)的基础上，增加了一个任务队列（microqueue)。 microqueue的优先级更高，js引擎每处理完一个macroqueue事件，它都会优先处理所有的microqueue中的事件，等microqueue中的事件处理完后再处理macroqueue中的下一个事件。 \n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\nconsole.log('-2')\nsetTimeout(()=>{\n    console.log('-1')\n},0)\np.then((v)=>{\n    promisify(v)\n})\n// 0 1 -2 2 3 -1\n```\n\nProblems with callback\n1. 非线性，难理解，易出错\n2. 信任问题，控制反转\n   * 过早调用 （Zalgo风险）\n   * 过晚调用（或不调用)\n   * 调用次数过多或过少\n   * 未能传递所需的环境或参数\n   * 吞掉可能出现的错误和异常\n\n> Promise并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其它工具之间的可信任的中介机制。\n\nSome notes for `promise`:\n1. 流程控制\n2. 注册事件\n3. 如何调度的:同一promise的then调用顺序？不同promise的then调用顺序？\n4. 由于promise决议后只能有一个值（或一个拒绝理由), resolve/reject 只接受一个参数，其它参数会被忽略(==避免传递参数混乱==)。多次调用resolve 也会只执行第一个（==避免过多调用==）。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+1,v+2)\n        resolve(v+3,v+4)\n    })\n}\n\nlet p = promisify(0)\np.then((v,w)=>{\n    console.log(v,w)\n})\n//0 1\n```\n5. Promise 把整个操作（包括异常）变成了异步，避免了Zalgo风险. 从而使得`then`可以在‘操作’的后面提供 resolve/reject 参数. 注意，构造promise时，虽然 resolve/reject 是以参数形式存在，但是可以自由使用它们。以下面的promisify为例：\n```js\nfunction request(url){\n\treturn new Promise( function(resolve,reject){\n    \tajax(url,resolve);\n    });\n}\n```\najax函数是立即执行的，它可以把 （此时空的）resolve 当作回调。然而，当ajax函数异步完成后需要调用 resolve 时，Promise机制可以保证 resolve的调用顺利地进行。如何保证？首先ajax是异步调用resolve的，即使把ajax换成同步函数，promise也会使其异步化（==避免过早调用==），这样可以保证在request同一个tick中，通过then得到的resolve都是已经准备就绪的。注意，即使不在同一个tick中注册的resolve函数也会被顺利执行(==避免过晚或过少调用==）。\n```js\nfunction promisify(val){\n    return new Promise(function(resolve,reject){\n        console.log(val);\n        resolve();\n    })\n}\nconsole.log(1)\nlet  p = promisify(2)\nconsole.log(3)\n\nlet q = promisify(4)\nlet z = q.then(()=>{\n    console.log(7)\n    return p.then(()=>{\n        console.log(9)\n    })\n})\nconsole.log(5)\np.then(()=>{\n    console.log(8)\n})\nconsole.log(6)\n//1 2 3 4 5 6 7 8 9\n```\n\n6. Promise.resolve() 会展开thenable的值,从而得到可信任的promise。若传入的参数是真正的promise, Promise.resolve() 什么都不会做，只会直接返回这个参数。\n7. resolve和reject的返回值会作为then返回的新promise的决议值。resolve/reject都可以得到新的未决议的promise (可能fullfill,也可能reject). 注意区分当前promise和then得到的新promise, 当前reject，但then得到的新promise是既可以fullfill又可以reject的。\n然而，`new Promise`中的 resolve/reject则不同。 若提供的参数是promise, resolve会展开它，决议值是该参数promise的决议值（可能是完成的也可能是拒绝的）。而reject的决议值则只能是拒绝的。因此 `new Promise( function(resolve,reject){})` 中的 resolve 确实是“决议” （而非完成）的意思。而then方法中最好理解为 `then(fulfilled, rejected)`. 前者中resolve/reject 是形参，后者中 fulfilled/rejected 是实参。\n\n8. then未提供resolve或reject时，默认的resolve/reject会把当前决议值（或拒绝理由）传递下去。`catch(err){}` 则是`then(null, function(err){})` 的缩写。\n9. promise chain中的错误（异常或reject)可以通过在chain的末端加一个`catch()`来处理，如果中间的then没有rejected处理，那么默认的rejected函数会将该错误往下传。唯一的问题是最后的catch仍返回一个可能出错的promise，这个问题ES6本身没有提供解决方案。\n\n## `new Promise()`\n1. `new Promise(function(resolve,reject){})` 中形参resolve/reject对应的实参是 Promise.resolve/Promise.reject. 以下两种构造是等价的\n```js\nlet p =new Promise(function(resolve,reject){resolve(1);});\nlet q = Promise.resolve(1);\n```\n2. `new Promise()` 中的代码是立即执行的（当前tick)， 其中的resolve/reject语句是异步执行的，其它语句（之前和之后的）可以看作是同步的。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\n\np.then((v)=>{\n    console.log(v)\n})\n// 0 1 2\n```\n3. `new Promise(null)` 并不会返回一个rejected promise, 而是抛出异常。因为promise构造过程中出现异常会使得promise构造失败。\n\n## `then`方法\n1. 调用promise的`then()` 会自动创建一个新的promise从调用返回\n2. 在then的resolve/reject内部，如果返回一个值或抛出一个异常，新返回的promise就相应地决议为该值.\n3. 如果resolve/reject 返回一个promise, 它将会被==展开==，不管它的决议值是什么，都会成为then返回的新promise的决议值。(新返回的promise的决议值是那个promise展开后的值，不是那个promise本身）\n\n## 其它API\n`all`, `race`, `none`, `any`, `first`, `last`\n\n### Promise局限性\n1. promise chain返回的是最后一个promise, 没有保存中间promise的引用，无法在外面给中间的promise关联处理函数。若中间的promise有自己的错误处理，则最后的promise不会得到错误的通知 （除非中间的错误处理函数继续产生拒绝）。这与`try...catch...`类似。\n2. promise只能决议为单一值，需要多个值的话可以封闭成单个值，但是在复杂的场景中会比较笨重。一种方法是可以分解成多个promise后用promise.all来处理。\n3. promise只能决议一次，不能像监听事件一样，事件每发生一次相应的监听函数就会被调用一次。一种方法是每次事件触发后构造一个新的promise.\n4. 已有代码大都基于回调，需要手动promisify. 可以编写类似于`Promise.wrap()`的函数来解决，该wrap函数返回一个promisory. promisory调用才返回一个promise. 例如 `let request = Promise.wrap(ajax);` ES6并未提供类似的wrap函数。\n5. promise无法取消。一种方法是用“门” 来hack. 单独的promise不应该可取消，但是取消一个promise chain是合理的。\n\n## Promise/A+\n[The official specification](https://promisesaplus.com)\n\nA 'promise' is an object or function with a `then` method whose behavior conforms to this specification.\n\nA promise must be in one of three states: pending, fulfilled, or rejected.\n\nWhen pending, a promise:\n* may transition to either the fulfilled or rejected state.\n\nWhen fulfilled, a promise:\n* must not transition to any other state.\n* must have a value, which must not change.\nWhen rejected, a promise:\n* must not transition to any other state.\n* must have a reason, which must not change.\n\nHere, “must not change” means immutable identity (i.e. ===), but does not imply deep immutability.\n\nA promise must provide a then method to access its current or eventual value or reason.\n\nA promise’s then method accepts two arguments (both are optional, non-function are ignored):\n```\npromise.then(onFulfilled, onRejected)\n```\n`then` must return a promise\n```js\n'use strict';\nvar p1 = new Promise(function (resolve, reject) {\n    console.log('p1 creating...'); //execute immediately\n    reject('rejecting');  //transit to fulfilled\n    resolve('resolving'); //invalid\n    console.log('p1 created'); //execute immediately\n});\nconsole.log(typeof p1); //object\nconsole.log(p1);\np1.then(function (result) {\n    console.log(result)\n}, function (err) {\n    console.log(err)\n});\n```\noutput:\n```\np1 creating...\np1 created\nobject\nPromise { <rejected> 'rejecting' }\nrejecting\n```\n",[[1565786741147,["yonggu@yongs-MacBook-Air.local",[[1,2829,"\n7. "]],[2825,2825],[2829,2829]]],[1565786743128,["yonggu@yongs-MacBook-Air.local",[[-1,2826,"7. "]],[2829,2829],[2826,2826]]]],null,"yonggu@yongs-MacBook-Air.local"],["17af5065-7d27-40d2-bdb2-41762a3e9bee",1565787313974,"# References\n[Javascript promise, under the hood.](https://medium.com/@ningxia/javascript-promises-under-the-hood-4ce853fcb2c9)\n\nThis article illustrate how promise works by writing its own promise library squab. It clearly shows what \"promise\" generally looks like.\n\n[Promise by 廖雪锋](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n\n## Summary\n注意区分：决议（resolve), 完成（fulfill) 拒绝（reject) 异常(error)\n\nA Promise represents a value which may be available now, or in the future, or never.\nBefore ES6, it's just a syntactical sugar for asynchronous function callback. (Not for ES6, in which promise has ==built-in async support==.)\n\nES6在事件队列（macroqueue)的基础上，增加了一个任务队列（microqueue)。 microqueue的优先级更高，js引擎每处理完一个macroqueue事件，它都会优先处理所有的microqueue中的事件，等microqueue中的事件处理完后再处理macroqueue中的下一个事件。 \n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\nconsole.log('-2')\nsetTimeout(()=>{\n    console.log('-1')\n},0)\np.then((v)=>{\n    promisify(v)\n})\n// 0 1 -2 2 3 -1\n```\n\nProblems with callback\n1. 非线性，难理解，易出错\n2. 信任问题，控制反转\n   * 过早调用 （Zalgo风险）\n   * 过晚调用（或不调用)\n   * 调用次数过多或过少\n   * 未能传递所需的环境或参数\n   * 吞掉可能出现的错误和异常\n\n> Promise并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其它工具之间的可信任的中介机制。\n\nSome notes for `promise`:\n1. 流程控制\n2. 注册事件\n3. 如何调度的:同一promise的then调用顺序？不同promise的then调用顺序？\n4. 由于promise决议后只能有一个值（或一个拒绝理由), resolve/reject 只接受一个参数，其它参数会被忽略(==避免传递参数混乱==)。多次调用resolve 也会只执行第一个（==避免过多调用==）。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+1,v+2)\n        resolve(v+3,v+4)\n    })\n}\n\nlet p = promisify(0)\np.then((v,w)=>{\n    console.log(v,w)\n})\n//0 1\n```\n5. Promise 把整个操作（包括异常）变成了异步，避免了Zalgo风险. 从而使得`then`可以在‘操作’的后面提供 resolve/reject 参数. 注意，构造promise时，虽然 resolve/reject 是以参数形式存在，但是可以自由使用它们。以下面的promisify为例：\n```js\nfunction request(url){\n\treturn new Promise( function(resolve,reject){\n    \tajax(url,resolve);\n    });\n}\n```\najax函数是立即执行的，它可以把 （此时空的）resolve 当作回调。然而，当ajax函数异步完成后需要调用 resolve 时，Promise机制可以保证 resolve的调用顺利地进行。如何保证？首先ajax是异步调用resolve的，即使把ajax换成同步函数，promise也会使其异步化（==避免过早调用==），这样可以保证在request同一个tick中，通过then得到的resolve都是已经准备就绪的。注意，即使不在同一个tick中注册的resolve函数也会被顺利执行(==避免过晚或过少调用==）。\n```js\nfunction promisify(val){\n    return new Promise(function(resolve,reject){\n        console.log(val);\n        resolve();\n    })\n}\nconsole.log(1)\nlet  p = promisify(2)\nconsole.log(3)\n\nlet q = promisify(4)\nlet z = q.then(()=>{\n    console.log(7)\n    return p.then(()=>{\n        console.log(9)\n    })\n})\nconsole.log(5)\np.then(()=>{\n    console.log(8)\n})\nconsole.log(6)\n//1 2 3 4 5 6 7 8 9\n```\n\n6. Promise.resolve() 会展开thenable的值,从而得到可信任的promise。若传入的参数是真正的promise, Promise.resolve() 什么都不会做，只会直接返回这个参数。\n\n7. resolve和reject的返回值会作为then返回的新promise的决议值。resolve/reject都可以得到新的未决议的promise (可能fullfill,也可能reject). 注意区分当前promise和then得到的新promise, 当前reject，但then得到的新promise是既可以fullfill又可以reject的。\n然而，`new Promise`中的 resolve/reject则不同。 若提供的参数是promise, resolve会展开它，决议值是该参数promise的决议值（可能是完成的也可能是拒绝的）。而reject的决议值则只能是拒绝的。因此 `new Promise( function(resolve,reject){})` 中的 resolve 确实是“决议” （而非完成）的意思。而then方法中最好理解为 `then(fulfilled, rejected)`. 前者中resolve/reject 是形参，后者中 fulfilled/rejected 是实参。\n\n8. then未提供resolve或reject时，默认的resolve/reject会把当前决议值（或拒绝理由）传递下去。`catch(err){}` 则是`then(null, function(err){})` 的缩写。\n9. promise chain中的错误（异常或reject)可以通过在chain的末端加一个`catch()`来处理，如果中间的then没有rejected处理，那么默认的rejected函数会将该错误往下传。唯一的问题是最后的catch仍返回一个可能出错的promise，这个问题ES6本身没有提供解决方案。\n\n## `new Promise()`\n1. `new Promise(function(resolve,reject){})` 中形参resolve/reject对应的实参是 Promise.resolve/Promise.reject. 以下两种构造是等价的\n```js\nlet p =new Promise(function(resolve,reject){resolve(1);});\nlet q = Promise.resolve(1);\n```\n2. `new Promise()` 中的代码是立即执行的（当前tick)， 其中的resolve/reject语句是异步执行的，其它语句（之前和之后的）可以看作是同步的。\n```js\nfunction promisify(v){\n    return new Promise(function (resolve, reject) {\n        console.log(v)\n        resolve(v+2)\n        console.log(v+1)\n    })\n}\n\nlet p = promisify(0)\n\np.then((v)=>{\n    console.log(v)\n})\n// 0 1 2\n```\n3. `new Promise(null)` 并不会返回一个rejected promise, 而是抛出异常。因为promise构造过程中出现异常会使得promise构造失败。\n\n## `then`方法\n1. 调用promise的`then()` 会自动创建一个新的promise从调用返回\n2. 在then的resolve/reject内部，如果返回一个值或抛出一个异常，新返回的promise就相应地决议为该值.\n3. 如果resolve/reject 返回一个promise, 它将会被==展开==，不管它的决议值是什么，都会成为then返回的新promise的决议值。(新返回的promise的决议值是那个promise展开后的值，不是那个promise本身）\n\n## 其它API\n`all`, `race`, `none`, `any`, `first`, `last`\n\n### Promise局限性\n1. promise chain返回的是最后一个promise, 没有保存中间promise的引用，无法在外面给中间的promise关联处理函数。若中间的promise有自己的错误处理，则最后的promise不会得到错误的通知 （除非中间的错误处理函数继续产生拒绝）。这与`try...catch...`类似。\n2. promise只能决议为单一值，需要多个值的话可以封闭成单个值，但是在复杂的场景中会比较笨重。一种方法是可以分解成多个promise后用promise.all来处理。\n3. promise只能决议一次，不能像监听事件一样，事件每发生一次相应的监听函数就会被调用一次。一种方法是每次事件触发后构造一个新的promise.\n4. 已有代码大都基于回调，需要手动promisify. 可以编写类似于`Promise.wrap()`的函数来解决，该wrap函数返回一个promisory. promisory调用才返回一个promise. 例如 `let request = Promise.wrap(ajax);` ES6并未提供类似的wrap函数。\n5. promise无法取消。一种方法是用“门” 来hack. 单独的promise不应该可取消，但是取消一个promise chain是合理的。\n\n## Promise/A+\n[The official specification](https://promisesaplus.com)\n\nA 'promise' is an object or function with a `then` method whose behavior conforms to this specification.\n\nA promise must be in one of three states: pending, fulfilled, or rejected.\n\nWhen pending, a promise:\n* may transition to either the fulfilled or rejected state.\n\nWhen fulfilled, a promise:\n* must not transition to any other state.\n* must have a value, which must not change.\nWhen rejected, a promise:\n* must not transition to any other state.\n* must have a reason, which must not change.\n\nHere, “must not change” means immutable identity (i.e. ===), but does not imply deep immutability.\n\nA promise must provide a then method to access its current or eventual value or reason.\n\nA promise’s then method accepts two arguments (both are optional, non-function are ignored):\n```\npromise.then(onFulfilled, onRejected)\n```\n`then` must return a promise\n```js\n'use strict';\nvar p1 = new Promise(function (resolve, reject) {\n    console.log('p1 creating...'); //execute immediately\n    reject('rejecting');  //transit to fulfilled\n    resolve('resolving'); //invalid\n    console.log('p1 created'); //execute immediately\n});\nconsole.log(typeof p1); //object\nconsole.log(p1);\np1.then(function (result) {\n    console.log(result)\n}, function (err) {\n    console.log(err)\n});\n```\noutput:\n```\np1 creating...\np1 created\nobject\nPromise { <rejected> 'rejecting' }\nrejecting\n```\n",[[1565787313830,["yonggu@yongs-MacBook-Air.local",[[1,0,"---\ntags:\n  - js\n---\n"]],[12,12],[33,33]]]],null,"yonggu@yongs-MacBook-Air.local"]]}</rejected></rejected></rejected>