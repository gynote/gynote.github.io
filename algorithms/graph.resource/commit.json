{"compress":true,"commitItems":[["b49a13e7-e3f8-4f49-99ce-ba0c73ea0597",1545829138017,"---\ntitle: graph\n---\n### Minimum Height Trees(MHTs)\n\nGiven a tree T, find all the roots that make the minimum height.\n\n* solution 1\n Find any longest path, its middle point(s) is the answer.\n Finding a longest path can be solved in $O(n)$ time by tree dp, or simply **2 tree travesal**.\n* solution 2\n Use direct dp, let dp[i] be the height of the tree when the tree root is i, compute dp[0],...,dp[n - 1] by tree dp in a dfs manner.\n In dfs, when we reach node u, let T be the subtree by removing all u's descendants. We also maintain a variable acc that keeps track of the length of the longest path in T with u being on end. Then we have dp[u] = max(height[u], acc).\n In dfs, when we move from u to its child v, then newAcc = max(acc + 1, height[v']+2) for all other child v' of u. We can compute it in $O(1)$ time by maintaining two heights of each node u, one is the conventional height, the other is the height after removing the branch w.r.t. the convention height.\n* solution 3\n Iterately prune leaves. Use `Set` to denote the adjancency, compute the answer in O(n) time.\n [Leetcode solution 1 and 2](https://leetcode.com/problems/minimum-height-trees/discuss/76052)\n [Leetcode solution 3](https://leetcode.com/problems/minimum-height-trees/discuss/76055)\n \nGraph Algorithm (4+3+3+5 = 10 algs)\n1. Elementary\n   * BFS\n   * DFS\n   * Topological Sort\n   * SCC\n2. MST\n   * Generic-MST\n   * Kruskal\n   * Prim\n3. SSSP\n   * Bellman-Ford\n   * SSSP-DAG\n   * Dijkstra\n4. APSP\n   * Slow-Matrix-Mulplication\n   * Faster-Matrix-Mulplication\n   * Floyd-Warshall\n   * Transitive Clousure\n   * Johnson",[[1545829107979,["IIIS@dujcel-PC",[[-1,1293,"0"],[1,1294,"5"]],[1293,1294],[1294,1294]]]],null,"IIIS@dujcel-PC"]]}