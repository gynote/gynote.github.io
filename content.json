{"meta":{"title":"GYNote","subtitle":null,"description":null,"author":"Gu Yong","url":"https://guyong.xyz"},"pages":[{"title":"","date":"2020-01-15T09:01:11.727Z","updated":"2020-01-15T09:01:11.717Z","comments":true,"path":"index.html","permalink":"https://guyong.xyz/index.html","excerpt":"hello, world ! Featured reading notes for C++ Primer Categories default cpp math Reading Notes Expert C Programming","text":"hello, world ! Featured reading notes for C++ Primer Categories default cpp math Reading Notes Expert C Programming"},{"title":"","date":"2020-01-15T08:42:37.920Z","updated":"2020-01-15T08:03:45.114Z","comments":true,"path":"markdown features.html","permalink":"https://guyong.xyz/markdown features.html","excerpt":"üòÑ $O(\\sqrt{n})$ * task item","text":"üòÑ $O(\\sqrt{n})$ task item"},{"title":"","date":"2020-01-15T08:00:43.971Z","updated":"2020-01-15T07:27:51.824Z","comments":true,"path":"Notes for learning python (5th).html","permalink":"https://guyong.xyz/Notes for learning python (5th).html","excerpt":"This is my notes for ‚ÄúLearning Ptyhon (5th)‚Äù. Preliminaries 1 2 3 4 >>> S = 'spam' >>> dir() # no argument >>> dir(S) >>> help(S.replace) For lists, if a[:], a[k] appear in expresion, they are copied, e.g. after b = a[:3], b refers to a new object. If a[:],a[k]appear on the left side of assignm","text":"This is my notes for ‚ÄúLearning Ptyhon (5th)‚Äù. Preliminaries 1234&gt;&gt;&gt; S = 'spam'&gt;&gt;&gt; dir() # no argument&gt;&gt;&gt; dir(S)&gt;&gt;&gt; help(S.replace) For lists, if a[:], a[k] appear in expresion, they are copied, e.g. after b = a[:3], b refers to a new object. If a[:],a[k]appear on the left side of assignment, they referred to the original object, e.g. after a=[0,1,2] a[:]=[0,1], a becomes [0,1]. When we say copy, we mean shallow copy. 12345&gt;&gt;&gt; a = [0,[1,2],3]&gt;&gt;&gt; b=a[1]&gt;&gt;&gt; b[0] = 0&gt;&gt;&gt; a[0, [0, 2], 3] In sum, after exp1 = exp2, exp1 points to the same place as exp2. Python always follows a reference to an object whenever the reference is used. Types and Operations Objects are pieces of memory, with values and sets of associated operations. Everything we process in Python programs is a kind of obj The Python Conceptual Hierarchy: Programs are composed of modules. Modules contain statements. Statements contain expressions. Expressions create and process objects. In formal terms, this means that Python is dynamically typed , a model that keeps track of types for you automatically instead of requiring declaration code, but it is also strongly typed, a constraint that means you can perform on an object only operations that are valid for its type. Core Types Immutable: number, string, tuple, bytes Mutable: list, dictionary, set, bytearray Primitive: number Collection: Sequence: string, tuple, bytes, list, bytearray Mapping: dictionary, set bytearray is a distinct hybrid of immutable bytes strings (whose b‚Äô‚Ä¶‚Äô syntax is required in 3.X and optional in 2.X) and mutable lists (coded and displayed in [] ). Generic operations that span multiple types show up as built-in functions or expressions (e.g. len(X) , X[0] ), but type-specific operations are method calls (e.g., aString.upper() ). Both dir and help also accept as arguments either a real object (like our string S) , or the name of a data type (like str , list , and dict ). As a notable difference, Python 2.X allows its normal and Unicode strings to be mixed in expressions as long as the normal string is all ASCII; in contrast, Python 3.X has a tighter model that never allows its normal and byte strings to mix without explicit conversion. None of the string object‚Äôs own methods support pattern-based text processing. Unlike out-of-bounds assignments in lists, which are forbidden, assignments to new dictionary keys create those keys, fetching a nonexistent key is still a mistake. (Use the get() method) A file‚Äôs contents are always a string in your script, regardless of the type of data the file contains: 1&gt;&gt;&gt; for line in open('data.txt'): print(line) Text files represent content as normal str strings and perform unicode encoding and decoding automatically when writing and reading data, while binary files represent content as a special bytes string and allow you to access file content unaltered. Sets are unordered collections of unique and immutable objects. Decimal, Fraction, booleans As you‚Äôll learn, in Python, we code to object interfaces (operations supported), not to types. Numbers Floating-point numbers are implemented as C ‚Äúdoubles‚Äù in standard CPython, and therefore get as much precision as the C compiler used to build the Python interpreter gives to doubles. built-in calls: hex(I), oct(I), bin(I), int(str,base), X.bit_length(), round(X), X.as_integer_ratio() Internally, complex numbers are implemented as pairs of floating-point numbers Comparison operators may be chained: X &lt; Y &lt; Z produces the same result as X &lt; Y and Y &lt; Z . 12&gt;&gt;&gt; 1 == 2 &lt; 3 # Same as: 1 == 2 and 2 &lt; 3False # Not same as: False &lt; 3 (which means 0 &lt; 3, which is true!) In recent Pythons, the slice expression X[I:J:K] is equivalent to indexing with a slice object: X[slice(I, J, K)]. In Python 3.X, nonnumeric mixed-type magnitude comparisons are not allowed and raise exceptions; this includes sorts by proxy. Operators lower in the table have higher precedence, and so bind more tightly in mixed expressions. Operators in the same row in Table 5-2 generally group from left to right when combined (except for exponentiation, which groups right to left, and comparisons, which chain left to right). Besides mixing operators in expressions, you can also mix numeric types: in mixed-type numeric expressions, Python first converts operands up to the type of the most complicated operand, and then performs the math on same-type operands. Python ranks the complexity of numeric types like so: integers are simpler than floating point numbers, which are simpler than complex numbers. In general, Python does not convert across any other type boundaries automatically. Adding a string to an integer, for example, results in an error, unless you manually convert one or the other. In 3.X, the / now always performs true division, returning a float result that includes any remainder, regardless of operand types. The // performs floor division, which truncates the remainder and returns an integer for integer operands or a float if any operand is a float. The // operator truncates the result down to its floor, which means the closest whole number below the true result. Frozenset Internally, the names True and False are instances of bool , which is in turn just a subclass (in the object oriented sense) of the built-in integer type int . True and False behave exactly like the integers 1 and 0, except that they have customized printing logic. 12&gt;&gt;&gt; True + 4 # (Hmmm)5 Numpy, Scipy The dynamic typing A variable never has any type information or constraints associated with it. The notion of type lives with objects, not names. Variables are generic in nature; they always simply refer to a particular object at a particular point in time. Variables always link to objects and never to other variables, but larger objects may link to other objects (for instance, a list object has links to the objects it contains). These links from variables to objects are called references in Python‚Äîthat is, a reference is a kind of association, implemented as a pointer in memory Technically speaking, objects have more structure than just enough space to represent their values. Each object also has two standard header fields: a type designator used to mark the type of the object, and a reference counter used to determine when it‚Äôs OK to reclaim the object. reference counter, cyclic reference sys.getrefcount(X) If a[:], a[k] appears in expression, they are copied. e.g. after b=a[:3], b refers to a new object. If a[:], a[k] appears in left side of assignment, they referred to the original object. e.g. after a=[0,1,2] a[:] = [0,1], a becomes [0,1] Because everything seems to work by assignment and references in Python, a basic understanding of this model is useful in many different contexts. As you‚Äôll see, it works the same in assignment statements, function arguments, for loop variables, module imports, class attributes, and more. The good news is that there is just one assignment model in Python; weakref String String literal forms: Single quotes: ‚Äòspa&quot;m‚Äô Double quotes: ‚Äúspa‚Äôm‚Äù Triple quotes: ‚Äò‚Äô‚Äô‚Ä¶ spam ‚Ä¶‚Äô‚Äô‚Äô , ‚Äú‚Äù&quot;‚Ä¶ spam ‚Ä¶&quot;&quot;&quot; Escape sequences: ‚Äús\\tp\\na\\0m‚Äù Raw strings: r&quot;C:\\new\\test.spm&quot; Bytes literals in 3.X and 2.6+ (see Chapter 4 , Chapter 37 ): b‚Äôsp\\x01am‚Äô Unicode literals in 2.X and 3.3+ (see Chapter 4 , Chapter 37 ): u‚Äôeggs\\u0020spam‚Äô In fact, 3.X defines str strings formally as sequences of Unicode code points, not bytes, to make this clear. There‚Äôs more on how strings are stored internally in Chapter 37 if you care to know. Some escape sequences allow you to embed absolute binary values into the characters of a string. Python keeps both the string‚Äôs length and text in memory. In fact, no character terminates a string in Python Notice that Python displays nonprintable characters in hex, regardless of how they were specified. That is, r&quot;‚Ä¶&quot; is not a valid string literal‚Äîa raw string cannot end in an odd number of backslashes. If you need to end a raw string with a single backslash, you can use two and slice off the second (r‚Äô1\\nb\\tc\\‚Äô[:-1]), tack one on manually (r‚Äô1\\nb\\tc‚Äô + ‚Äò\\‚Äô), or skip the raw string syntax and just double up the backslashes in a normal string (‚Äò1\\nb\\tc\\‚Äô). 1234567891011&gt;&gt;&gt; menu = &quot;&quot;&quot;spam # comments here added to string!... eggs # ditto... &quot;&quot;&quot;&gt;&gt;&gt; menu&apos;spam # comments here added to string!\\neggs # ditto\\n&apos;&gt;&gt;&gt; menu = (... &quot;spam\\n&quot; # comments here ignored... &quot;eggs\\n&quot; # but newlines not automatic... )&gt;&gt;&gt; menu&apos;spam\\neggs\\n&apos; built-in tool: ord() chr() The method call expression: object.method(arguments) is evaluated from left to right‚ÄîPython will first fetch the method of the object and then call it, passing in both object and the arguments string formatting expressions and string formatting method calls Technically, the format built-in runs the subject object‚Äôs __format__ method, which the str.format method does internally for each formatted item. The % expressions tend to be a bit simpler and more concise; the format method has a handful of advanced features that the % expression does not, but even more involved formatting still seems to be essentially a draw in terms of complexity. 1&gt;&gt;&gt; from formats import commas, money Types Share Operation Sets by Categories: numbers sequences mappings Lists and Dictionaries Slice assignment, the last operation in the preceding example, replaces an entire section of a list in a single step. Because it can be a bit complex, it is perhaps best thought of as a combination of two steps: Deletion. The slice you specify to the left of the = is deleted. Insertion. The new items contained in the iterable object to the right of the = are inserted into the list on the left, at the place where the old slice was deleted. Note, L[2:5]=L[3:6], for instance, works fine because the value to be inserted is fetched before the deletion happens on the left. 12345678910&gt;&gt;&gt; L = [1]&gt;&gt;&gt; L[:0] = [2, 3, 4] # Insert all at :0, an empty slice at front&gt;&gt;&gt; L[2, 3, 4, 1]&gt;&gt;&gt; L[len(L):] = [5, 6, 7] # Insert all at len(L):, an empty slice at end&gt;&gt;&gt; L[2, 3, 4, 1, 5, 6, 7]&gt;&gt;&gt; L.extend([8, 9, 10]) # Insert all at end, named method&gt;&gt;&gt; L[2, 3, 4, 1, 5, 6, 7, 8, 9, 10] The effect of L.append(X) is similar to L+[X], but while the former changes L in place, the latter makes a new list. In Python 3.X, this has changed: magnitude comparison of mixed types raises an exception instead of falling back on the fixed cross-type ordering. L.sort() vs. sorted built-in tools: reversed Like lists, dictionaries store object references (not copies, unless you ask for them explicitly) keys in 3.X returns an iterable object, instead of a physical list Unlike lists, however, whenever you assign a new dictionary key (one that hasn‚Äôt been assigned before) you create a new entry in the dictionary. In 3.X the dictionary keys , values , and items methods all return view objects , whereas in 2.X they return actual result lists. Besides being iterable, dictionary views also retain the original order of dictionary components, reflect future changes to the dictionary, and may support set operations. Unlike 2.X‚Äôs list results, though, dictionary views in 3.X are not carved in stone when created‚Äîthey dynamically reflect future changes made to the dictionary after the view object has been created: In set operations, views may be mixed with other views, sets, and dictionaries; dictionaries are treated the same as their keys views in this context: 123456&gt;&gt;&gt; D = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;&gt;&gt;&gt; D.keys() &amp; D.keys() # Intersect keys views&#123;&apos;b&apos;, &apos;c&apos;, &apos;a&apos;&#125;&gt;&gt;&gt; D.keys() &amp; &#123;&apos;b&apos;&#125; # Intersect keys and set&#123;&apos;b&apos;&#125;&gt;&gt;&gt; D. 12&gt;&gt;&gt; Ks.sort()AttributeError: &apos;dict_keys&apos; object has no attribute &apos;sort&apos; To work around this, in 3.X you must either convert to a list manually or use the sorted call (introduced in Chapter 4 and covered in this chapter) on either a keys view or the dictionary itself: OrderedDict Tuples, files and everything else As you can see, named tuples are a tuple/class/dictionary hybrid (In short, named tuples build new classes that extend the tuple type, inserting a property accessor method for each named field that maps the name to its position) Empty lines in the file come back as strings containing just a newline character, not as empty strings. 12&gt;&gt;&gt; myfile.readline() # Empty string: end-of-file&apos;&apos; Text files represent content as normal str strings, perform Unicode encoding and decoding automatically, and perform end-of-line translation by default. Binary files represent content as a special bytes string type and allow programs to access file content unaltered. pickle, shelve, json, struct In fact, when nested objects are present, Python automatically traverses data structures to apply comparisons from left to right, and as deeply as needed. More specifically, Python compares types as follows: Numbers are compared by relative magnitude, after conversion to the common highest type if needed. Strings are compared lexicographically (by the character set code point values returned by ord ), and character by character until the end or first mismatch (‚Äúabc‚Äù&lt; ‚Äúac‚Äù ). Lists and tuples are compared by comparing each component from left to right, and recursively for nested structures, until the end or first mismatch ([2] &gt; [1, 2] ). Sets are equal if both contain the same items (formally, if each is a subset of the other), and set relative magnitude comparisons apply subset and superset tests. Dictionaries compare as equal if their sorted (key, value) lists are equal. Relative magnitude comparisons are not supported for dictionaries in Python 3.X, but they work in 2.X as though comparing sorted (key, value) lists. Nonnumeric mixed-type magnitude comparisons (e.g., 1 &lt; ‚Äòspam‚Äô ) are errors in Python 3.X. They are allowed in Python 2.X, but use a fixed but arbitrary ordering rule based on type name string. By proxy, this also applies to sorts, which use comparisons internally: nonnumeric mixed-type collections cannot be sorted in 3.X. Python 3.X disallows mixed-type magnitude testing, except numeric types. More generally, the notions of true and false are intrinsic properties of every object in Python‚Äîeach object is either true or false, as follows: Numbers are false if zero, and true otherwise. Other objects are false if empty, and true otherwise. That is, None is something, not nothing (despite its name!)‚Äîit is a real object and a real piece of memory that is created and given a built-in name by Python itself. In fact, even types themselves are an object type in Python. Calls to these names are really object constructor calls, not simply conversion functions, though you can treat them as simple functions for basic usage. For classic classes in Python 2.X, all class instances are instead of the type ‚Äúinstance,‚Äù and we must compare instance __class__ attributes to compare their types meaningfully. Repetition Adds One Level Deep 123&gt;&gt;&gt; L = [4, 5, 6]&gt;&gt;&gt; X = L * 4 # Like [4, 5, 6] + [4, 5, 6] + ...&gt;&gt;&gt; Y = [L] * 4 # [L] + [L] + ... = [L, L,...] If you remember that repetition, concatenation, and slicing copy only the top level of their operand objects, these sorts of cases make much more sense Beware of Cyclic Data Structure 1234&gt;&gt;&gt; L = ['grail'] # Append reference to same object&gt;&gt;&gt; L.append(L) # Generates cycle in object: [...]&gt;&gt;&gt; L['grail', [...]] Statements and Syntax Assignments, Expressions, and Prints Assignments create object references. (i.e. link a name with an object) They always create references to objects instead of copying the objects. Names are created when first assigned. Names must be assigned before referenced. Module imports, function and class definitions, for loop variables, and function arguments are all implicit assignments. sequence assignment‚Äîany sequence of names can be assigned to any sequence of values, and Python assigns the items one at a time by position. In fact, the original tuple and list assignment forms in Python have been generalized to accept any type of sequence (really, iterable) on the right as long as it is of the same length as the sequence on the left. Multiple-target assignment: Python assigns a reference to the same object (the object farthest to the right) to all the targets on the left. In tuple/list assignment, Python creates a temporary tuple that saves the original values of the variables on the right before assigning. we can even assign nested sequences, and Python unpacks their parts according to their shape, as expected. The sequence-nesting shape of the object on the left must match that of the object on the right. This nested tuple (really, sequence) unpacking assignment form works for function argument lists in Python 2.X (though not in 3.X) In short, a single starred name, *X, can be used in the assignment target in order to specify a more general matching against the sequence‚Äîthe starred name is assigned a list, which collects all items in the sequence not assigned to other names. In fact, the starred name can appear anywhere in the target. This is similar in spirit to slicing, but not exactly the same‚Äîa sequence unpacking assignment always returns a list for multiple matched items, whereas slicing returns a sequence of the same type as the object sliced 12345&gt;&gt;&gt; a, *b = &apos;spam&apos;&gt;&gt;&gt; a, b(&apos;s&apos;, [&apos;p&apos;, &apos;a&apos;, &apos;m&apos;])&gt;&gt;&gt; S[0], S[1:] # Slices are type-specific, * assignment always returns a list(&apos;s&apos;, &apos;pam&apos;) Finally, errors can still be triggered if there is more than one starred name, if there are too few values and no star (as before), and if the starred name is not itself coded inside a sequence: 12&gt;&gt;&gt; *a = seqSyntaxError: starred assignment target must be in a list or tuple For augmented assignments, inplace operations may be applied for mutable objects as an optimization. 12345678910&gt;&gt;&gt; L = [1, 2]&gt;&gt;&gt; L = L + [3] # Concatenate: slower&gt;&gt;&gt; L[1, 2, 3]&gt;&gt;&gt; L.append(4) # Faster, but in place&gt;&gt;&gt; L[1, 2, 3, 4]&gt;&gt;&gt; L += [9, 10] # Mapped to L.extend([9, 10])&gt;&gt;&gt; L[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Note however, that because of this equivalence += for a list is not exactly the same as a + and = in all cases‚Äîfor lists += allows arbitrary sequences (just like extend), but concatenation normally does not: 123456&gt;&gt;&gt; L = []&gt;&gt;&gt; L += &apos;spam&apos; # += and extend allow any sequence, but + does not!&gt;&gt;&gt; L[&apos;s&apos;, &apos;p&apos;, &apos;a&apos;, &apos;m&apos;]&gt;&gt;&gt; L = L + &apos;spam&apos;TypeError: can only concatenate list (not &quot;str&quot;) to list Although Python now supports statements like X += Y, it still does not have C‚Äôs auto-increment/decrement operators (e.g., X++, ‚àí‚àíX). Naming For portability, case also matters in the names of imported module files, even on platforms where the filesystems are case-insensitive. True, False, and None, are somewhat unusual in meaning‚Äîthey also appear in the built-in scope of Python described in Chapter 17, and they are technically names assigned to objects. Names that begin with a single underscore (_X) are not imported by a from module import * statement Names that begin with two underscores and do not end with two more (__X) are localized (‚Äúmangled‚Äù) to enclosing classes. Expression Statements In Python, you can use an expression as a statement, too. Expressions are commonly used as statements in two situations: For calls to functions and methods For printing values at the interactive prompt A statement that is not an expression must generally appear on a line all by itself, not nested in a larger syntactic structure. For example, Python doesn‚Äôt allow you to embed assignment statements (=) in other expressions. Besides, C assignments return the value assigned, but Python assignments are just statements, not expressions. Expression statements are often used to run list methods that change a list in place: 123&gt;&gt;&gt; L = L.append(4) # But append returns None, not L&gt;&gt;&gt; print(L) # So we lose our list!None Normally, whether printed output is buffered in memory or not is determined by file; passing a true value to flush forcibly flushes the stream. Because the print statement just sends text to the sys.stdout.write method, you can capture printed text in your programs by assigning sys.stdout to an object whose write method processes the text in arbitrary ways if Tests and Syntax Rules There is no switch or case statement in Python Block and statement boundaries are detected automatically. Compound statements = header + ‚Äú:‚Äù + indented statements. Blank lines, spaces, and comments are usually ignored. Docstrings are ignored but are saved and displayed by tools. Statements may span multiple lines if you‚Äôre continuing an open syntactic pair. Boolean operators stop evaluating (‚Äúshort circuit‚Äù) as soon as a result is known. Boolean and and or operators return a true or false object in Python, not the values True or False For A = Y if X else Z, Python runs expression Y only if X turns out to be true, and runs expression Z only if X turns out to be false. When defining classes, we can specify their Boolean nature with either the bool or len methods. while and for Loops The optional else block run if didn‚Äôt exit loop with break Python doesn‚Äôt have what some languages call a ‚Äúdo until‚Äù loop statement. Python has no ‚Äúgo to‚Äù statement. Python 3.X (but not 2.X) allows ellipses coded as ‚Ä¶ (literally, three consecutive dots) to appear any place an expression can. Because ellipses do nothing by themselves, this can serve as an alternative to the pass statement, 123&gt;&gt;&gt; X = ... # Alternative to None&gt;&gt;&gt; XEllipsis After the for loop, this loop variable normally still refers to the last item visited, which is the last item in the sequence unless the loop exits with a break statement. Even nested structures may be automatically unpacked this way in a for: 1&gt;&gt;&gt; for ((a, b), c) in [((1, 2), 3), ((4, 5), 6)]: print(a, b, c) In fact, as a general rule, you should resist the temptation to count things in Python‚Äîits iteration tools automate much of the work you do to loop over collections in lower-level languages like C. built-in tools: range, zip, enumerate The zip function is more general than this example suggests. For instance, it accepts any type of sequence (really, any iterable object, including files), and it accepts more than two arguments. Moreover, zip truncates result tuples at the length of the shortest sequence when the argument lengths differ. Iterations and Comprehensions Iterator vs. Iterable vs. Iteration tool/context Single scan vs. multiple scan In some cases these two objects are the same when only a single scan is supported (e.g., files), and the iterator object is often temporary, used internally by the iteration tool. Moreover, some objects are both an iteration context tool (they iterate) and an iterable object (their results are iterable)‚Äîincluding Chapter 20‚Äôs generator expressions, and map and zip in Python 3.X. When the for loop begins, it first obtains an iterator from the iterable object by passing it to the iter built-in function; the object returned by iter in turn has the required next method. The iter function internally runs the iter method, much like next and __next__. For comprehensions, their full syntax allows for any number of for clauses, each of which can have an optional associated if clause. Keep in mind, though, that every built-in tool that scans from left to right across objects uses the iteration protocol. Notice that, unlike map and others, sorted returns an actual list in Python 3.X instead of an iterable. One of the fundamental distinctions of Python 3.X is its stronger emphasis on iterators than 2.X. This, along with its Unicode model and mandated new-style classes, is one of 3.X‚Äôs most sweeping changes. Unlike range, map, zip, filter are their own iterators‚Äîafter you step through their results once, they are exhausted. In Python 3.X the dictionary keys, values, and items methods return iterable view objects that generate result items one at a time. Documentation Interlude The PyDoc system covered here can render a module‚Äôs internal documentation as either plain text in a shell, or HTML in a web browser. The help function: press the space bar to move to the next page, Enter to go to the next line, and Q to quit: Sphinx Functions and Generators Function Basics def is executable code. it‚Äôs legal (and even occasionally useful) to nest def statements inside if statements, while loops, and even other defs. def creates an object and assigns it to a name. Function objects may also have arbitrary user-defined attributes attached to them to record data. Names are always looked up in scopes‚Äîplaces where variables are stored‚Äî and assignments bind names to scopes. Files must generally be rewound (e.g., with a file.seek(0) or another open) after they have been read to end-of-file once, and so are single-pass iterators Scopes When we talk about the search for a name‚Äôs value in relation to code, the term scope refers to a namespace: that is, the location of a name‚Äôs assignment in your source code determines the scope of the name‚Äôs visibility to your code. By default, all names assigned inside a function are associated with that function‚Äôs namespace, and no other. Lexical scoping: If a variable is assigned inside a def, it is local to that function. If a variable is assigned in an enclosing def, it is nonlocal to nested functions. If a variable is assigned outside all defs, it is global to the entire file. Each module is a global scope, the global scope spans a single file only. Assigned names are local unless declared global or nonlocal All other names are enclosing function locals, globals, or built-ins. Each call to a function creates a new local scope. Note L=X within a function will classify L as a local, but L.append(X) will not. Name Resolution: The LEGB Rule Name assignments create or change local names by default. Name references search at most four scopes: local, then enclosing functions (if any), then global, then built-in. Names declared in global and nonlocal statements map assigned names to enclosing module and function scopes, respectively. Note that the second scope lookup layer, E‚Äîthe scopes of enclosing defs or lambdas‚Äîcan technically correspond to more than one lookup level. Also keep in mind that these rules apply only to simple variable names (e.g., spam). Qualified attribute names (e.g., object.spam) live in particular objects and follow a completely different set of lookup rules than those covered here. There are technically three more scopes in Python‚Äîtemporary loop variables in some comprehensions, exception reference variables in some try handlers, and local scopes in class statements In 3.X, the loop variables are local to the expression itself in all comprehension forms: generator, list, set, and dictionary. In 2.X, they are local to generator expressions and set and dictionary compressions, but not to list comprehensions that map their names to the scope outside the expression. By contrast, for loop statements never localize their variables to the statement block in any Python. In 3.X, exception reference variables are local to that except block, and in fact are removed when the block is exited (even if you‚Äôve used it earlier in your code!). Although the LEGB rule is used to resolve names used in both the top level of a class itself as well as the top level of method functions nested within it, classes themselves are skipped by scope lookups‚Äîtheir names must be fetched as object attributes. The global/nonlocal Statement The global statement consists of the keyword global, followed by one or more names separated by commas. All the listed names will be mapped to the enclosing module‚Äôs scope when assigned or referenced within the function body. 1global x The name x do not need even exist in the enclosing module before the function runs; in this case, the first assignment in the function creates x in the module. If, on the other hand, X is declared nonlocal within the function in 3.X (only), the assignment changes the name X in the closest enclosing function‚Äôs local scope. The name X must have been defined in at least one enclosing function. 123456def f1():x = 88def f2(x=x): # Remember enclosing scope X with defaultsprint(x)f2()f1() # Prints 88 Because the second x is evaluated before Python steps into the nested def, it still refers to the x in f1. 1234def func():x = 4action = (lambda n, x=x: x ** n) # Pass x in manuallyreturn action Loop variables may require defaults, not scopes, Compare 12345&gt;&gt;&gt; def makeActions():acts = []for i in range(5): # Tries to remember each iacts.append(lambda x: i ** x) # But all remember same last i!return acts with 12345&gt;&gt;&gt; def makeActions():acts = []for i in range(5): # Use defaults insteadacts.append(lambda x, i=i: i ** x) # Remember current ireturn acts Because defaults are implemented as single objects attached to functions, mutable defaults retain state from call to call, rather than being initialized anew on each call. Unlike global, nonlocal names must already exist in the enclosing function‚Äôs scope when declared. In fact, they are checked at function definition time before either an enclosing or nested function is called. Nonlocal both allows assignment to names in enclosing function scopes and limits scope lookups for such names to enclosing defs. Python uses naming conventions in both 2.X and 3.X that ensure that the arbitrary names you assign as function attributes won‚Äôt clash with names related to internal implementation. To summarize: globals, nonlocals, classes, and function attributes all offer changeable state-retention options. Arguments In Python 2.X, it‚Äôs also possible to automatically unpack tuples in arguments passed to a function. 1def f((a,(b,c))) This def syntax is no longer supported in Python 3.X. Instead, code this function as: 1def f(T): (a, (b, c)) = T Tuple unpacking argument syntax is also disallowed by 3.X in lambda function argument lists. Somewhat asymmetrically, tuple unpacking assignment is still automatic in 3.X for loops targets By default, arguments are matched by position, from left to right, and you must pass exactly as many arguments as there are argument names in the function header. In a function call, arguments must appear in this order: any positional arguments or the *iterable form, followed by any keyword arguments or the **dict form. If we see *iterable and **dict as being unpacked to positional arguments and keyword arguments, the order becomes: any positional arguments, followed by any keyword arguments. In a broad sense, there are only two arguments: positional and keyword. 123456def foo(a,b,c,d,e,f,g): print(&apos;ok&apos;)b=[2]x = &#123;&apos;d&apos;:4,&apos;e&apos;:5&#125;y = &#123;&apos;f&apos;:6&#125;foo(1,*b,3,**x,g=7,**y) //ok In a function header, we use the term ‚Äúparameter‚Äù instead of ‚Äúargument‚Äù In a function header, parameters must appear in this order: any normal parameter(name); followed by any default parameters (name=value); followed by the *name (or * in 3.X) form; followed by any name or name=value keyword-only arguments (in 3.X); followed by the **name form We can use a * character by itself in the arguments list to indicate that a function does not accept a variable-length argument list but still expects all arguments following the * to be passed as keywords. The name=value form has two meaning: before the form *name, it‚Äôs positional with default value after the form *name, it‚Äôs keyword-only with default value There can be at most one *name parameter, which collects all remaining positional arguments (including those in *iterabe). Similarly, There can be at most one **dict parameter, which collects all remaining keyword arguments (including those in **dict arguments). 12345def foo(a,b=3,*c,d,**e): print(b,e)x = [3,4]y = &#123;&apos;d&apos;:5,&apos;e&apos;:6,&apos;f&apos;:7&#125;foo(1,2,*x,**y) # 2 &#123;&apos;e&apos;: 6, &apos;f&apos;: 7&#125; The steps that Python internally carries out to match arguments before assignment can roughly be described as follows: Assign nonkeyword arguments by position. Assign keyword arguments by matching names. Assign extra nonkeyword arguments to *name tuple. Assign extra keyword arguments to **name dictionary. Assign default values to unassigned arguments in header. Note that in both function call and header, the name = value form are not assignments. The default parameters are attached to function objects, if you code a default to be a mutable object (e.g., def f(a=[])), the same, single mutable object is reused every time the function is later called‚Äîeven if it is changed in place within the function. Below is a tracer function example: 123def tracer(func, *pargs, **kargs): # Accept arbitrary arguments print(&apos;calling:&apos;, func.__name__) return func(*pargs, **kargs) # Pass along arbitrary arguments Advanced Function Topics In fact, recursion is not used nearly as often in Python as in more esoteric languages like Prolog or Lisp, because Python emphasizes simpler procedural statements like loops, which are usually more natural. On the other hand, recursion‚Äîor equivalent explicit stack-based algorithms we‚Äôll meet shortly‚Äîcan be required to traverse arbitrarily shaped structures. Also note that standard Python limits the depth of its runtime call stack‚Äîcrucial to recursive call programs‚Äîto trap infinite recursion errors. To expand it, use the sys module: 1234&gt;&gt;&gt; sys.getrecursionlimit() # 1000 calls deep default1000&gt;&gt;&gt; sys.setrecursionlimit(10000) # Allow deeper nesting&gt;&gt;&gt; help(sys.setrecursionlimit) # Read more about it Function attributes and annotations 12&gt;&gt;&gt; func.__code__&gt;&gt;&gt; func.__code__.co_varnames Python‚Äôs own implementation-related data stored on functions follows naming conventions that prevent them from clashing with the more arbitrary attribute names you might assign yourself. In 3.X, all function internals‚Äô names have leading and trailing double underscores (‚Äú__X__‚Äù); Attributes are related to objects instead of scopes (and must be referenced through the function name within its code). Python provides special syntax for specifying annotations, but it doesn‚Äôt do anything with them itself; annotations are completely optional, and when present are simply attached to the function object‚Äôs annotations attribute for use by other tools. Syntactically, function annotations are coded in def header lines, as arbitrary expressions associated with arguments and return values. 123456&gt;&gt;&gt; def func(a: &apos;spam&apos;, b: (1, 10), c: float) -&gt; int:return a + b + c&gt;&gt;&gt; func(1, 2, 3)6&gt;&gt;&gt; func.__annotations__&#123;&apos;c&apos;: &lt;class &apos;float&apos;&gt;, &apos;b&apos;: (1, 10), &apos;a&apos;: &apos;spam&apos;, &apos;return&apos;: &lt;class &apos;int&apos;&gt;&#125; Finally, note that annotations work only in def statements, not lambda expressions. lambda is an expression, not a statement. lambda‚Äôs body is a single expression, not a block of statements. Defaults work on lambda arguments, just like in a def. The code in a lambda body also follows the same scope lookup rules as code inside a def. lambda expressions introduce a local scope much like a nested def, which automatically sees names in enclosing functions, the module, and the built-in scope (via the LEGB rule) 12&gt;&gt;&gt; ((lambda x: (lambda y: x + y))(99))(4)103 useful library: functools, operator Comprehensions and Generations map calls can be twice as fast as equivalent for loops, and list comprehensions are often faster than map calls. Generator function vs. Generator vs. Generator expression send advances to the next item yield is now an expression form, it must be enclose in parentheses unless it‚Äôs the only item on the right ride of the assignment statement. methods: throw, close yield from Generator expressions may also run slightly slower than list comprehensions in practice, so they are probably best used only for very large result sets, or applications that cannot wait for full results generation. A subtle but important point: both generator functions and generator expressions are their own iterators and thus support just one active iteration. Python 3.X localizes loop variables in all four forms‚Äîtemporary loop variable names in generator, set, dictionary, and list comprehensions are local to the expression. In general, list comprehensions are usually the quickest of the bunch; map beats list comprehensions in Python only when all tools must call functions; for loops tend to be slower than comprehensions; and generator functions and expressions are slower than comprehensions by a constant factor. Under The benchmarking Interlude Timeing modules: time, timer, profile, timeit, pystone.py Part V. Modules and Packages Modules are processed with two statements and one important function: import: Lets a client (importer) fetch a module as a whole from: Allows clients to fetch particular names from a module imp.reload (reload in 2.X): Provides a way to reload a module‚Äôs code without stopping Python In Python, cross-file module linking is not resolved until such import statements are executed at runtime; their net effect is to assign module names‚Äîsimple variables like b‚Äîto loaded module objects. In fact, the module name used in an import statement serves two purposes: it identifies the external file to be loaded, but it also becomes a variable assigned to the loaded module. Similarly, objects defined by a module are also created at runtime, as the import is executing: import literally runs statements in the target file one at a time to create its contents. In python, imports perform three distinct steps the first time a program imports a given file: Find the module‚Äôs file. Compile it to byte code (if needed). Run the module‚Äôs code to build the objects it defines. Bear in mind that all three of these steps are carried out only the first time a module is imported during a program‚Äôs execution; later imports of the same module in a program run bypass all of these steps and simply fetch the already loaded module object in memory. Technically, Python does this by storing loaded modules in a table named sys.mod ules and checking there at the start of an import operation. If the module is not present, a three-step process begins. (see imp.reload) Python keeps already imported modules in the built-in sys.modules dictionary so it can keep track of what‚Äôs been loaded. Notice that compilation happens when a file is being imported. Because of this, you will not usually see a .pyc byte code file for the top-level file of your program, unless it is also imported elsewhere‚Äîonly imported files leave behind .pyc files on your machine. The Module Search Path Roughly, Python‚Äôs module search path is composed of the concatenation of these major components, some of which are preset for you and some of which you can tailor to tell Python where to look: The home directory of the program (subdirectories not included) PYTHONPATH directories (if set) Standard library directories The contents of any .pth files (if present) The site-packages home of third-party extensions Ultimately, the concatenation of these four components becomes sys.path, a mutable list of directory. The first and third elements of the search path are defined automatically. Because Python searches the concatenation of these components from first to last, though, the second and fourth elements can be used to extend the path to include your own source code directories. By modifying the sys.path list, you can modify the search path for all future imports made in a program‚Äôs run. Such changes last only for the duration of the script, however; PYTHONPATH and .pth files offer more permanent ways to modify the path‚Äîthe first per user, and the second per installation. Python automatically selects any type that matches a module‚Äôs name. For same names with different extensions, Python follows a standard picking order, though this order is not guaranteed to stay the same over time or across implementations. By using import hooks, archived files are automatically extracted at import time when a .zip file is selected from the module import search path. For details, see the builtin importlib.__import__ function Third-party extensions for Python typically use the distutils tools in the standard library to automatically install themselves, so no path configuration is required to use their code. Systems that use distutils generally come with a setup.py script, which is run to install them; this script imports and uses distutils modules to place such systems in a directory that is automatically part of the module search path (usually in the Lib\\site-packages subdirectory of the Python install tree, wherever that resides on the target machine). Module Coding Basics Module Filenames The .py is technically optional for top-level files that will be run but not imported. In fact, both the names of module files and the names of directories used in package imports (discussed in the next chapter) must conform to the rules for variable names presented. import fetches the module as a whole, so you must qualify to fetch its names; in contrast, from fetches (or copies) specific names out of the module. In Python 3.X, the from ‚Ä¶* statement form described here can be used only at the top level of a module file, not within a function. Just like def, import and from are executable statements, not compile-time declarations. They may be nested in if tests, to select among options; appear in function defs, to be loaded only on calls (subject to the preceding note); be used in try statements, to provide defaults; and so on. 123&gt;&gt;&gt; from small import x, y # Copy two names out&gt;&gt;&gt; x = 42 # Changes local x only&gt;&gt;&gt; y[0] = 42 # Changes shared mutable in place At least conceptually, a from statement like this one: 1from module import name1, name2 # Copy these two names out (only) is equivalent to this statement sequence: 1234import module # Fetch the module objectname1 = module.name1 # Copy names out by assignmentname2 = module.name2del module # Get rid of the module name The from always imports the entire module into memory if it has not yet been imported, regardless of how many names it copies out of the file. There is no way to load just part of a module file. Moreover, the from module import * form really can corrupt namespaces and make names difficult to understand, especially when applied to more than one file. Probably the best real-world advice here is to generally prefer import to from for simple modules, to explicitly list the variables you want in most from statements, and to limit the from * form to just one import per file. The as extension works in both import and from as a simple renaming tool. In fact, internally, module namespaces are stored as dictionary objects. The LEGB scope rule applies only to bare, unqualified names‚Äîit may be used for the leftmost name in a name path, but later names after dots search specific objects instead. lexical scoping notion‚Äîin Python, the scopes surrounding a piece of code are completely determined by the code‚Äôs physical position in your file. Scopes are never influenced by function calls or module imports. import operations never give upward visibility to code in imported files ‚Äîan imported file cannot see names in the importing file. In some sense, although imports do not nest namespaces upward, they do nest downward. 1print(mod2.mod3.X) # Nested mod3&apos;s X Reloading Modules The reload function forces an already loaded module‚Äôs code to be reloaded and rerun. Assignments in the file‚Äôs new code change the existing module object in place. Note that reload currently only works on modules written in Python; Because reload expects an object, a module must have been previously imported successfully before you can reload it. When you call reload, Python rereads the module file‚Äôs source code and reruns its toplevel statements. Perhaps the most important thing to know about reload is that it changes a module object in place; it does not delete and re-create the module object. Reloads impact all clients that use import to fetch modules Reloads impact future from clients only. Clients that used from to fetch attributes in the past won‚Äôt be affected by a reload; they‚Äôll still have references to the old objects fetched before the reload. Reloads apply to a single module only. You must run them on each module you wish to update, unless you use code or tools that apply reloads transitively. Module Packages Dotted package from package import item: the item can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. import item.subitem.subitem: each item except for the last must be a package; the last item can be a module or a package but can‚Äôt be a class or function or variable defined in the previous item. Tow kinds of imports: absolute imports relative imports In sum, Python imports select between relative (in the containing directory) and absolute (in a directory on sys.path) resolutions as follows: Dotted imports: from . import m Are relative-only in both 2.X and 3.X Nondotted imports: import m, from m import x Are relative-then-absolute in 2.X, and absolute-only in 3.X Note that relative imports are based on the name of the current module. Since the name of the main module is always ‚Äúmain‚Äù, modules intended for use as the main module of a Python application must always use absolute imports. Python 3.3 adds another flavor to modules: namespace packages. Packages are just a special kind of module. Specifically, any module that contains a __path__ attribute is considered a package. Two kinds of packages: regular packages namespace packages"},{"title":"","date":"2020-01-15T07:37:43.251Z","updated":"2019-12-30T01:35:05.430Z","comments":true,"path":"Á∫øÁ®ãÂêåÊ≠•Êú∫Âà∂.html","permalink":"https://guyong.xyz/Á∫øÁ®ãÂêåÊ≠•Êú∫Âà∂.html","excerpt":"Á∫øÁ®ãÂü∫Á°ÄÁü•ËØÜ Á∫øÁ®ãÂêåÊ≠•ÁöÑÂ∫ïÂ±ÇÊîØÊåÅÂåÖÊã¨Ôºö 1. TSL ÔºàÊàñÂÖ∂ÂÆÉÔºâÂéüÂ≠êÊìç‰Ωú 2. ‰∏≠Êñ≠ÊúçÂä° ‰∫íÊñ•ÈîÅMutex ÊúÄÂü∫Êú¨ÁöÑÂêåÊ≠•Êú∫Âà∂ÊòØÈîÅÔºàLockÔºâÔºåÂåÖÊã¨ ‰∫íÊñ•ÈîÅ(Mutex), Read-Write ÈîÅ, Á©∫ËΩ¨ÈîÅ„ÄÇ‰ª•Mutex‰∏∫‰æãÔºö * ÂØπMutexÁä∂ÊÄÅÁöÑÂà§Êñ≠Âèä‰øÆÊîπÊòØÈÄöËøáÊú∫Âô®Êèê‰æõÁöÑÂéüÂ≠êÊÄßÊåá‰ª§ÂÆåÊàêÁöÑ„ÄÇ * ÊØè‰∏™Mutex‰∏äÊúâ‰∏Ä‰∏™Á≠âÂæÖÈòüÂàóÔºàwaiting list) * Lock()Êìç‰ΩúÂú®‚Äùlocked‚Äù ÊÉÖÂÜµ‰∏ã‰ºöË¢´ÊåÇËµ∑ÔºåÂÆûÈôÖ‰∏äÊòØÂÖàÁ©∫ËΩ¨ÔºàspinÔºâ‰∏ÄÂ∞è‰ºöÂÜçÊå°ÂúüÊåÇËµ∑ÔºàyieldÔºâÔºåÂΩìÂâçÁ∫øÁ®ã‰ºöÂä†ÂÖ•Âà∞MutexÁöÑwaiting list‰∏≠„ÄÇ * ÊåÇËµ∑ÊòØÊåáÂ∞ÜÁ∫øÁ®ãÁΩÆ‰∫é‚ÄùÁù°Áú†‚ÄúÁä∂ÊÄÅÔºåÂπ∂Ë∞ÉÁî®Á∫øÁ®ãË∞ÉËØï","text":"Á∫øÁ®ãÂü∫Á°ÄÁü•ËØÜ Á∫øÁ®ãÂêåÊ≠•ÁöÑÂ∫ïÂ±ÇÊîØÊåÅÂåÖÊã¨Ôºö TSL ÔºàÊàñÂÖ∂ÂÆÉÔºâÂéüÂ≠êÊìç‰Ωú ‰∏≠Êñ≠ÊúçÂä° ‰∫íÊñ•ÈîÅMutex ÊúÄÂü∫Êú¨ÁöÑÂêåÊ≠•Êú∫Âà∂ÊòØÈîÅÔºàLockÔºâÔºåÂåÖÊã¨ ‰∫íÊñ•ÈîÅ(Mutex), Read-Write ÈîÅ, Á©∫ËΩ¨ÈîÅ„ÄÇ‰ª•Mutex‰∏∫‰æãÔºö ÂØπMutexÁä∂ÊÄÅÁöÑÂà§Êñ≠Âèä‰øÆÊîπÊòØÈÄöËøáÊú∫Âô®Êèê‰æõÁöÑÂéüÂ≠êÊÄßÊåá‰ª§ÂÆåÊàêÁöÑ„ÄÇ ÊØè‰∏™Mutex‰∏äÊúâ‰∏Ä‰∏™Á≠âÂæÖÈòüÂàóÔºàwaiting list) Lock()Êìç‰ΩúÂú®‚Äùlocked‚Äù ÊÉÖÂÜµ‰∏ã‰ºöË¢´ÊåÇËµ∑ÔºåÂÆûÈôÖ‰∏äÊòØÂÖàÁ©∫ËΩ¨ÔºàspinÔºâ‰∏ÄÂ∞è‰ºöÂÜçÊå°ÂúüÊåÇËµ∑ÔºàyieldÔºâÔºåÂΩìÂâçÁ∫øÁ®ã‰ºöÂä†ÂÖ•Âà∞MutexÁöÑwaiting list‰∏≠„ÄÇ ÊåÇËµ∑ÊòØÊåáÂ∞ÜÁ∫øÁ®ãÁΩÆ‰∫é‚ÄùÁù°Áú†‚ÄúÁä∂ÊÄÅÔºåÂπ∂Ë∞ÉÁî®Á∫øÁ®ãË∞ÉËØïÂáΩÊï∞ÂàáÊç¢Âà∞ÂÖ∂ÂÆÉÁ∫øÁ®ã Unlock() Êìç‰Ωú‰ºöÈáäÊîæÈîÅ, Âπ∂‰∏îÂî§ÈÜíwaiting list‰∏≠ÁöÑ‰∏Ä‰∏™ÔºàÊàñÊâÄÊúâÔºâÁ∫øÁ®ã„ÄÇ Condition Variables pthread_join()Ëß£ÂÜ≥ÁöÑÊòØÂ§ö‰∏™Á∫øÁ®ãÁ≠âÂæÖÂêå‰∏Ä‰∏™Á∫øÁ®ãÁöÑÁªìÊùü„ÄÇCondition variableËß£ÂÜ≥ÁöÑÊòØÂ§ö‰∏™Á∫øÁ®ãÁ≠âÂæÖÊüê‰∏™Êù°‰ª∂ÂèëÁîü„ÄÇ Condition‰∏ªË¶ÅÁî®Êù•ÂÆûÁé∞ÈÄöÁü•/ÂêåÊ≠•Êú∫Âà∂ÔºåÂÜÖÈÉ®‰πüÊòØÁî±waiting listÂÆûÁé∞„ÄÇÂÆûÈôÖ‰∏äMutex‰πüÊúâ‚ÄùÈÄöÁü•Âî§ÈÜí‚ÄúÂäüËÉΩÔºå‰ΩÜMutexÂäüËÉΩËøá‰∫éÁÆÄÂçïÔºåÁî®Êù•ÂÆûÁé∞ÈÄöÁü•/ÂêåÊ≠•ÂäüËÉΩÊó∂ÂÆπÊòìÂá∫ÈóÆÈ¢òÔºöÊØè‰∏™Á∫øÁ®ãÈúÄË¶Å‰∏çÊñ≠ÁöÑËØïÂõæËé∑ÂèñMutexÈîÅÂπ∂Ê£ÄÊü•Êù°‰ª∂ÊòØÂê¶ÂèëÁîüÔºå‰ªéËÄåÊµ™Ë¥πÂ§ßÈáèËµÑÊ∫ê„ÄÇÔºàpythonÁöÑconditionÂÜÖÈÉ®Â∞±ÊòØÁî®Â§ö‰∏™waiter lockÂÆûÁé∞ÁöÑ„ÄÇÔºâ Condition ‰∏ÄÂÆöË¶ÅÈÖçÂêà Mutex ÊâçËÉΩ‰ΩøÁî®ÔºåÂõ†‰∏∫Áä∂ÊÄÅÁöÑÊ£ÄÊµã/ÊîπÂèò‰∏éÁ≠âÂæÖ/Âèë‰ø°Êìç‰ΩúÈúÄË¶ÅÂÖ∑ÊúâÂéüÂ≠êÊÄß„ÄÇ wait() ‰ºöËá™Âä®ÈáäÊîæMutex, Á≠âÂà∞Ë¢´Âî§ÈÜíÊó∂‰ºöËá™Âä®ÂéªËé∑ÂèñMutex notify() ‰ºöÂî§Âî§ÈÜíwaiting list‰∏≠ÁöÑÁ∫øÁ®ã Ê£ÄÊµãÊù°‰ª∂Áä∂ÊÄÅË¶ÅÁî®while, Âèë‰ø°Âè∑Ë¶ÅÂú®‰∏¥ÁïåÂå∫ Semaphore ‰ø°Âè∑Èáè semaphoreÊòØËøõÁ®ãÈó¥PVÔºåÂèØ‰ª•ÁêÜËß£‰∏∫Â∏¶ËÆ°Êï∞Âô®ÁöÑCondition variable Python‰∏≠ÁöÑEvent, Queue References Êìç‰ΩúÁ≥ªÁªüÂ¶Ç‰ΩïÂÆûÁé∞mutex pthreadÁöÑÂêÑÁßçÂêåÊ≠•Êú∫Âà∂ When is a condition variable needed, isn‚Äôt a mutex enough? Python threads synchronization: Locks, RLocks, Semaphores, Conditions, Events and Queues ÂÖ≥‰∫éCondition Variable‰∏∫‰ªÄ‰πàÈúÄË¶Å‰∏Ä‰∏™MutexÁöÑÊÄùËÄÉ LinuxÂπ∂Âèë‰∏éÂêåÊ≠•"},{"title":"","date":"2020-01-15T07:37:43.215Z","updated":"2020-01-15T07:37:43.187Z","comments":true,"path":"graph theory.html","permalink":"https://guyong.xyz/graph theory.html","excerpt":"Graph theory Courses 1. Theory of Algorithms by Robert Tarjan Papers 1. Linear-Time Approximation for Maximum Weight Matching Ran Duan, Seth Pettie. 2014 Matching Definition and theorems alternating path, augmenting path, blossom, blossom lemma, Berge theorem Results 1. Unweighted, bipartite","text":"Graph theory Courses Theory of Algorithms by Robert Tarjan Papers Linear-Time Approximation for Maximum Weight Matching Ran Duan, Seth Pettie. 2014 Matching Definition and theorems alternating path, augmenting path, blossom, blossom lemma, Berge theorem Results Unweighted, bipartite augmenting path $O(mn)$ Hopcroft-Karp algorithm $O(\\sqrt{n}m)$ Weighted, bipartite (assignment problem) $O(mn+n^2\\log n)$ Unweighted, general Edmonds method (blossom shinking) $\\quad O(mn^2)\\quad O(nm\\alpha(m,\\lceil m/n\\rceil)) \\quad O(m\\sqrt{n})$ Weighted, general Edmonds method (blossom shinking) $\\quad O(mn^2)\\quad O(mn+n^2\\log n)$ Lectures and Papers Matching algorithms Includes augmenting path, Hopcroft-Karp algorithm, Edmonds method. Algorithms and proofs as well as the definition and lemma of blossom is more clear. Graph matching nonbipartite matching Includes Edmonds method, explains why bolssom shirking is needed in general graph. In DFS, a node may be encountered both in odd and even position. It‚Äôs necessary to record both of the two kinds of visited label. Otherwise, feasible augmenting path may exists but not found. However, if the algorithm distinguish the two kinds of visited label, odd length cycle may exists in a found path. Therefore, blossom shirking is needed. 2-Matching Definitions and Theorems b-matching, capacitated b-matching, 2-factors, $C_k$-free, TSP Definitions and Theorems Results"},{"title":"","date":"2020-01-15T09:03:06.914Z","updated":"2020-01-15T01:42:26.445Z","comments":true,"path":"Expert C Programming/Unscrambling Declarations in C.html","permalink":"https://guyong.xyz/Expert C Programming/Unscrambling Declarations in C.html","excerpt":"How to scramble a declaration In C, a type T can be one of the follows: 1. Base Type BT BT x; Base type BT ca be primitive types (int, double) and composite types (struct, union) 2. Array of type AT AT x[]; 3. Function returning type FT FT x() 4. Pointer to type PT PT *x; B","text":"How to scramble a declaration In C, a type T can be one of the follows: Base Type BT BT x; Base type BT ca be primitive types (int, double) and composite types (struct, union) Array of type AT AT x[]; Function returning type FT FT x() Pointer to type PT PT *x; Basic rules for legal declarations a function can‚Äôt return a function, so you‚Äôll never see foo()() a function can‚Äôt return an array, so you‚Äôll never see foo()[] an array can‚Äôt hold a function, so you‚Äôll never see foo[]() It can be inferred that: AT can‚Äôt be FT FT can‚Äôt be AT, FT Precedence rule To unscramble a declaration, we also need the precedence rule: parentheses grouping together parts of a declaration the postfix operators: parentheses () indicating a function square brackets [] indicating an array the prefix operator: the asterisk denoting ‚Äúpointing to‚Äù If a const and/or volatile keyword is next to a type specifier (e.g. int, long, etc.) it applies to the type specifier. Otherwise it applies to the pointer asterisk on its immediate ==left==. Now, it‚Äôs time to unscramble a declaration First, we should find the identifier x, the declaration is interpreted as ‚Äúx is ‚Ä¶‚Äù. x can be any kind: BT, AT, FT, PT By precedence rules, we should check first whether x is an array or function by looking to the right. (We still use x to denote the parts we have got) If it‚Äôs an array, we get an AT x[], which can be BT, AT, PT. So we should check whether x[] is an array again and again. When we can‚Äôt get an array, it can be BT, PT. Or if it‚Äôs a function, we get an FT x(), which can be BT,PT. Check whether x is a pointer by looking to the left. If it is, *x can be any kind. So go to step 2. The remaining part must be BT. Note that there can be grouping parentheses, as well as const and voatile. We ignore them above. Unscramble steps Go to the leftmost identifier, say ‚Äúidentifier is‚Äù Look at the next token to the right. If it is a square bracket, for each pair, say ‚Äúarray of‚Äù. Go to step 4 Or if it is an opening parenthesis, read up to the closing parenthesis, say ‚Äúfunction returning‚Äù If the token to the left is an opening parenthesis, this is the opening parenthesis grouping together part of the declaration we have already dealt with. Read up to the balancing parenthesis, start again at step 2 If the token to the left is any of const, volatile, *, keep reading tokens to the left, until it‚Äôs not one of these three. Go to step 4. The tokens that remain form the basic type of the declaration. typedef It looks exactly like a variable declaration, it is read exactly like one. The typedef keyword doesn‚Äôt create a variable, but causes the declaration to say ‚Äúthis name is a synonym for the stated type‚Äù. don‚Äôt put several declarators together in one typedef never, ever, bury the typedef in the middle of a declaration view a typedef as being a complete ‚Äúencapsulated‚Äù type (different from #define) 123456typedef int banana;unsigned banana i; // illegaltypedef char * char_ptr;char_ptr Bentley, Rolls_Royce; // both variables are pointers to charchar * ptr1, ptr2; // only ptr1 is pointer Namespace in C There are multiple namespaces in C: label names tags (one namespace for all structs, unions and enums) member names (each struct or union has its own namespace) everything else References Expert C programming"},{"title":"","date":"2020-01-15T09:03:22.093Z","updated":"2020-01-15T09:03:22.074Z","comments":true,"path":"Expert C Programming/index.html","permalink":"https://guyong.xyz/Expert C Programming/index.html","excerpt":"My note for the book ‚ÄúExpert C Programming‚Äù [Unscrambling Declarations in C](Unscrambling Declarations in C.html)","text":"My note for the book ‚ÄúExpert C Programming‚Äù [Unscrambling Declarations in C](Unscrambling Declarations in C.html)"},{"title":"","date":"2020-01-15T09:03:44.727Z","updated":"2020-01-15T09:03:44.704Z","comments":true,"path":"C++ Primer/index.html","permalink":"https://guyong.xyz/C++ Primer/index.html","excerpt":"My note for the book ‚ÄúC++ Primer (5th)‚Äù","text":"My note for the book ‚ÄúC++ Primer (5th)‚Äù"}],"posts":[]}