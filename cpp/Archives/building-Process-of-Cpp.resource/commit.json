{"compress":true,"commitItems":[["90578ea7-f369-440c-9dc7-4d2038b2eb52",1540267637992,"---\ntitle: Building Process\n---\n# Building Process\n<!-- toc depthFrom:2  -->\n\n- [Phases Of  Translation](#phases-of-translation)\n- [Other notes](#other-notes)\n\t- [1. Preprocessor](#1-preprocessor)\n\t\t- [Directives](#directives)\n\t\t- [Capabilities](#capabilities)\n\t- [2. Linkage](#2-linkage)\n\n<!-- tocstop -->\nGenerally, there are several output (not intermediate) targets to be built. The order in which they are built is specified manually. E.g. specified in target dependencies in Xcode, in makefile for linux, etc.\n\nFor each target, sources files (.c, .cpp) are translated to translation units in the order specified as above. (May be the order doesn't make difference because there exists no dependencies)\n\nFor details on xcode, refer to [The Build Process](https://www.objc.io/issues/6-build-tools/build-process/#build-settings)\nFor makefile, refer to:\n[A Simple Makefile Tutorial](http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/)\n[GNU make](https://www.gnu.org/software/make/manual/make.html)\n\n## Phases Of  Translation\n* A translation unit is the combination of a source files, included headers and source files less any source lines skipped by conditional inclusion preprocessor directive.\n* The standard defines 9 phases in the translation. The first four correspond to preprocessing, the next three are the compilation (including assembly), the next one is the instantiation of templates (producing instantiation units) and the last one is the linking.\n* In practice the eighth phase (the instantiation of templates) is often done during the compilation process but some compilers delay it to the linking phase and some spread it in the two.\n\nFor detail, refer to: http://en.cppreference.com/w/cpp/language/translation_phases\n\nFor clang, refer to [Mach-O Executables](https://www.objc.io/issues/6-build-tools/mach-o-executables/) (including details on sections in memory)\n\n## Other notes\n\n### 1. Preprocessor\nThe preprocessor is executed at translation phase 4, before the compilation. The result of preprocessing is a single file which is then passed to the actual compiler.\n#### Directives\nThe preprocessing directives control the behavior of the preprocessor. Each directive occupies one line and has the following format:\n* \\# character\n* preprocessing instruction (one of define, undef, include, if, ifdef, ifndef, else, elif, endif, line, error, pragma) [^1]\n* arguments (depends on the instruction)\n* line break\n\nThe null directive (# followed by a line break) is allowed and has no effect.\n\n[^1]: These are the directives defined by the standard. The standard does not define behavior for other directives: they might be ignored, have some useful meaning, or cause a compile-time error. Even if otherwise ignored, they are removed from the source code when the preprocessor is done. A common non-standard extension is the directive #warning which emits a user-defined message during compilation.\n\n#### Capabilities\nThe preprocessor has the source file translation capabilities:\nconditionally compile of parts of source file (controlled by directive #if, #ifdef, #ifndef, #else, #elif and #endif).\nreplace text macros while possibly concatenating or quoting identifiers (controlled by directives #define and #undef, and operators # and ##)\ninclude other files (controlled by directive #include and checked with __has_include (since C\\++17 ))\ncause an error (controlled by directive #error)\nThe following aspects of the preprocessor can be controlled:\nimplementation defined behavior (controlled by directive #pragma and operator _Pragma (since C\\++11))\nfile name and line information available to the preprocessor (controlled by directives #line)\n\n### 2. Linkage\nLinkage of entity (variable, function, class, type ,template, namespace, etc.) decides whether it can be seen in other places (other translation units, other scopes of the same translation unit).\nThere are there kinds of linkage: no linkage, internal linkage, external linkage.\n[Internal and External Linkage in C++ ( by Peter Goldsborough )](http://www.goldsborough.me/c/c++/linker/2016/03/30/19-34-25-internal_and_external_linkage_in_c++/)\n",[[1540267590542,["IIIS@dujcel-PC",[[-1,51,"<!-- toc depthFrom:2  -->"]],[51,76],[51,51]]],[1540267590960,["IIIS@dujcel-PC",[[-1,52,"\n"]],[51,51],[50,50]]]],null,"IIIS@dujcel-PC"]]}